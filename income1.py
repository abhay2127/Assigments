# -*- coding: utf-8 -*-
"""income1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JwJ9K84JBxS9Jj0oc3HDkIt3t3F-fYjy
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

data=pd.read_csv("data5.csv")

data

data.info()

data.describe()

data.isna().sum()

df=data

df.shape

df['workclass'].value_counts()

df.columns

df['occupation'].value_counts()

df['native.country'].value_counts()



"""Feature Engineering"""

df.education=df.education.replace(['Preschool','lst-4th','5th-10th'])
df.education=df.education.replace(['HS-grad','high school'])
df.education=df.education.replace(['Bachelors','undergrad'])
df.education=df.education.replace(['Masters','grad'])
df.education=df.education.replace(['Doctorate','doc'])

#income
df.income=df.income.replace('<=50k',0)
df.income=df.income.replace('>=50k',1)

df.head()

df.corr()

sns.heatmap(df.corr(),annot=True)

df.hist(figsize=(12,12),layout=(3,3),sharex=False)

df.plot(kind='box',figsize=(12,12),layout=(3,3),sharex=False,subplots=True)

sns.countplot(df['race'],hue='income',data=df)

sns.countplot(df['education'],hue='income',data=df)

x=df.drop(['income'],axis=1)
y=df['income']

from sklearn.preprocessing import StandardScaler,LabelEncoder

"""Feature Engineering"""

df1=df.copy()
df1=df1.apply(LabelEncoder().fit_transform)
df1.head()

ss=StandardScaler().fit(df1.drop('income',axis=1))

x=ss.transform(df1.drop('income',axis=1))
y=df['income']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=40)

Logistic regression

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

lr=LogisticRegression

model=lr.fit(x_train,y_train)
prediction=model.predict(x_test)

print("acc on training data:(:,3f)".format(lr.score(x_train,y_train)))
print("acc on test  data:".format(lr.score(x_test,y_test)))

from sklearn.ensemble import RandomForestClassifier

rfc= RandomForestClassifier()
model1=rfc.fit(x_train,y_train)
prediction1=model.predict(x_test)

print("acc on training data:(:,3f)".format(rfc.score(x_train,y_train)))

